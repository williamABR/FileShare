{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nconst mapOrSingle = function (obj, fn) {\n  if (obj.constructor !== Array) {\n    return fn(obj);\n  } else {\n    return obj.map(fn);\n  }\n};\n\nconst createTimer = function (cron) {\n  this._cron = this._cron || {};\n  const method = cron.method;\n  if (this._cron[method] && this._cron[method].timerRunning) return;\n\n  if (cron.autoStart === false) {\n    this._cron[method] = {\n      timerRunning: false\n    };\n  } else {\n    this._cron[method] = {\n      timer: setInterval(() => {\n        this.$options.methods[method].call(this);\n        this._cron[method].lastInvocation = +new Date();\n      }, cron.time),\n      timerRunning: true,\n      time: cron.time,\n      lastInvocation: +new Date()\n    };\n  }\n};\n\nconst mixin = {\n  mounted() {\n    if (this.$options.cron !== undefined) {\n      mapOrSingle(this.$options.cron, createTimer.bind(this));\n    }\n\n    this.$cron = {\n      stop: method => {\n        let locatedCronMethod = false;\n        mapOrSingle(this.$options.cron, cron => {\n          if (cron.method === method) {\n            locatedCronMethod = true;\n            if (!this._cron[cron.method].timerRunning) return;\n            clearInterval(this._cron[cron.method].timer);\n            this._cron[cron.method].timerRunning = false;\n          }\n        });\n\n        if (!locatedCronMethod) {\n          throw new Error(`Cron method '${method}' does not exist and cannot be stopped.`);\n        }\n      },\n      start: method => {\n        let locatedCronMethod = false;\n        mapOrSingle(this.$options.cron, cron => {\n          if (cron.method === method) {\n            locatedCronMethod = true;\n            createTimer.call(this, { ...cron,\n              autoStart: true\n            });\n          }\n        });\n\n        if (!locatedCronMethod) {\n          throw new Error(`Cron method '${method}' does not exist and cannot be started.`);\n        }\n      },\n      restart: method => {\n        this.$cron.stop(method);\n        this.$cron.start(method);\n      },\n      time: (method, time) => {\n        const currentDate = +new Date();\n\n        if (!this._cron[method].timerRunning) {\n          this._cron[method].lastInvocation = currentDate;\n        }\n\n        const elapsed = currentDate - this._cron[method].lastInvocation;\n        this.$cron.stop(method);\n\n        if (elapsed > time) {\n          this.$options.methods[method].call(this);\n          createTimer.call(this, {\n            method,\n            time\n          });\n        } else {\n          setTimeout(() => {\n            this.$options.methods[method].call(this);\n            createTimer.call(this, {\n              method,\n              time\n            });\n          }, time - elapsed);\n        }\n      }\n    };\n  },\n\n  beforeDestroy() {\n    for (const prop in this._cron) {\n      if (this._cron[prop] !== undefined) {\n        clearInterval(this._cron[prop].timer);\n      }\n    }\n  }\n\n};\n\nconst cron = Vue => {\n  Vue.mixin(mixin);\n};\n\nexport default cron;\nexport { mixin as crono };","map":{"version":3,"names":["mapOrSingle","obj","fn","constructor","Array","map","createTimer","cron","_cron","method","timerRunning","autoStart","timer","setInterval","$options","methods","call","lastInvocation","Date","time","mixin","mounted","undefined","bind","$cron","stop","locatedCronMethod","clearInterval","Error","start","restart","currentDate","elapsed","setTimeout","beforeDestroy","prop","Vue","crono"],"sources":["/Users/williambaquero/Documents/Go/Front/front/node_modules/vue-crono/index.js"],"sourcesContent":["const mapOrSingle = function(obj, fn){\r\n    if(obj.constructor !== Array){\r\n        return fn(obj);\r\n    }\r\n    else{\r\n        return obj.map(fn);\r\n    }\r\n};\r\n\r\nconst createTimer = function(cron){\r\n    this._cron = this._cron || {};\r\n    const method = cron.method;\r\n\r\n    if(this._cron[method] && this._cron[method].timerRunning) return;\r\n\r\n    if(cron.autoStart === false){\r\n        this._cron[method] = { timerRunning: false };\r\n    }\r\n    else{\r\n        this._cron[method] = {\r\n            timer: setInterval(() => {\r\n                this.$options.methods[method].call(this);\r\n                this._cron[method].lastInvocation = + new Date();\r\n            }, cron.time),\r\n            timerRunning: true,\r\n            time: cron.time,\r\n            lastInvocation: + new Date()\r\n        };\r\n    }\r\n};\r\n\r\nconst mixin = {\r\n    mounted(){\r\n    if (this.$options.cron !== undefined){\r\n        mapOrSingle(this.$options.cron, createTimer.bind(this));\r\n    }\r\n\r\n    this.$cron = {\r\n        stop: method => {\r\n            let locatedCronMethod = false;\r\n            mapOrSingle(this.$options.cron, cron => {\r\n                if (cron.method === method){\r\n                    locatedCronMethod = true;\r\n\r\n                    if(!this._cron[cron.method].timerRunning) return;\r\n\r\n                    clearInterval(this._cron[cron.method].timer);\r\n                    this._cron[cron.method].timerRunning = false;\r\n                }\r\n            });\r\n            if (!locatedCronMethod){\r\n                throw new Error(`Cron method '${method}' does not exist and cannot be stopped.`);\r\n            }\r\n        },\r\n        start: method => {\r\n            let locatedCronMethod = false;\r\n            mapOrSingle(this.$options.cron, cron => {\r\n                if (cron.method === method){\r\n                    locatedCronMethod = true;\r\n                    createTimer.call(this, { ...cron, autoStart: true });\r\n                }\r\n            });\r\n            if (!locatedCronMethod){\r\n                throw new Error(`Cron method '${method}' does not exist and cannot be started.`);\r\n            }\r\n        },\r\n        restart: method =>{\r\n            this.$cron.stop(method);\r\n            this.$cron.start(method);\r\n        },\r\n        time: (method, time) => {\r\n            const currentDate = + new Date();\r\n\r\n            if(!this._cron[method].timerRunning){\r\n                this._cron[method].lastInvocation = currentDate;\r\n            }\r\n            const elapsed = currentDate - this._cron[method].lastInvocation;\r\n\r\n            this.$cron.stop(method);\r\n\r\n            if(elapsed > time){\r\n                this.$options.methods[method].call(this);\r\n                createTimer.call(this, { method, time});\r\n            }\r\n            else{\r\n                setTimeout(() => {\r\n                    this.$options.methods[method].call(this);\r\n                    createTimer.call(this, { method, time});\r\n                }, time - elapsed);\r\n            }\r\n        }\r\n    };\r\n},\r\n    beforeDestroy(){\r\n    for(const prop in this._cron){\r\n        if(this._cron[prop] !== undefined){\r\n            clearInterval(this._cron[prop].timer);\r\n        }\r\n    }\r\n}\r\n};\r\n\r\nconst cron = Vue => {\r\n    Vue.mixin(mixin);\r\n};\r\n\r\nexport default cron;\r\nexport { mixin as crono };"],"mappings":"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"},"metadata":{},"sourceType":"module"}