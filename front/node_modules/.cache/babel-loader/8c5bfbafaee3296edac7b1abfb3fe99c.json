{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nconst convertExpression = require('./convert-expression');\n\nconst validationRegex = /^(?:\\d+|\\*|\\*\\/\\d+)$/;\n/**\n * @param {string} expression The Cron-Job expression.\n * @param {number} min The minimum value.\n * @param {number} max The maximum value.\n * @returns {boolean}\n */\n\nfunction isValidExpression(expression, min, max) {\n  const options = expression.split(',');\n\n  for (const option of options) {\n    const optionAsInt = parseInt(option, 10);\n    if (!Number.isNaN(optionAsInt) && (optionAsInt < min || optionAsInt > max) || !validationRegex.test(option)) return false;\n  }\n\n  return true;\n}\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\n\n\nfunction isInvalidSecond(expression) {\n  return !isValidExpression(expression, 0, 59);\n}\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\n\n\nfunction isInvalidMinute(expression) {\n  return !isValidExpression(expression, 0, 59);\n}\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\n\n\nfunction isInvalidHour(expression) {\n  return !isValidExpression(expression, 0, 23);\n}\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\n\n\nfunction isInvalidDayOfMonth(expression) {\n  return !isValidExpression(expression, 1, 31);\n}\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\n\n\nfunction isInvalidMonth(expression) {\n  return !isValidExpression(expression, 1, 12);\n}\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\n\n\nfunction isInvalidWeekDay(expression) {\n  return !isValidExpression(expression, 0, 7);\n}\n/**\n * @param {string[]} patterns The Cron-Job expression patterns.\n * @param {string[]} executablePatterns The executable Cron-Job expression\n * patterns.\n * @returns {void}\n */\n\n\nfunction validateFields(patterns, executablePatterns) {\n  if (isInvalidSecond(executablePatterns[0])) throw new Error(`${patterns[0]} is a invalid expression for second`);\n  if (isInvalidMinute(executablePatterns[1])) throw new Error(`${patterns[1]} is a invalid expression for minute`);\n  if (isInvalidHour(executablePatterns[2])) throw new Error(`${patterns[2]} is a invalid expression for hour`);\n  if (isInvalidDayOfMonth(executablePatterns[3])) throw new Error(`${patterns[3]} is a invalid expression for day of month`);\n  if (isInvalidMonth(executablePatterns[4])) throw new Error(`${patterns[4]} is a invalid expression for month`);\n  if (isInvalidWeekDay(executablePatterns[5])) throw new Error(`${patterns[5]} is a invalid expression for week day`);\n}\n/**\n * Validates a Cron-Job expression pattern.\n *\n * @param {string} pattern The Cron-Job expression pattern.\n * @returns {void}\n */\n\n\nfunction validate(pattern) {\n  if (typeof pattern !== 'string') throw new TypeError('pattern must be a string!');\n  const patterns = pattern.split(' ');\n  const executablePatterns = convertExpression(pattern).split(' ');\n  if (patterns.length === 5) patterns.unshift('0');\n  validateFields(patterns, executablePatterns);\n}\n\nmodule.exports = validate;","map":{"version":3,"names":["convertExpression","require","validationRegex","isValidExpression","expression","min","max","options","split","option","optionAsInt","parseInt","Number","isNaN","test","isInvalidSecond","isInvalidMinute","isInvalidHour","isInvalidDayOfMonth","isInvalidMonth","isInvalidWeekDay","validateFields","patterns","executablePatterns","Error","validate","pattern","TypeError","length","unshift","module","exports"],"sources":["/Users/williambaquero/Documents/Go/Front/front/node_modules/node-cron/src/pattern-validation.js"],"sourcesContent":["'use strict';\n\nconst convertExpression = require('./convert-expression');\n\nconst validationRegex = /^(?:\\d+|\\*|\\*\\/\\d+)$/;\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @param {number} min The minimum value.\n * @param {number} max The maximum value.\n * @returns {boolean}\n */\nfunction isValidExpression(expression, min, max) {\n    const options = expression.split(',');\n\n    for (const option of options) {\n        const optionAsInt = parseInt(option, 10);\n\n        if (\n            (!Number.isNaN(optionAsInt) &&\n                (optionAsInt < min || optionAsInt > max)) ||\n            !validationRegex.test(option)\n        )\n            return false;\n    }\n\n    return true;\n}\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\nfunction isInvalidSecond(expression) {\n    return !isValidExpression(expression, 0, 59);\n}\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\nfunction isInvalidMinute(expression) {\n    return !isValidExpression(expression, 0, 59);\n}\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\nfunction isInvalidHour(expression) {\n    return !isValidExpression(expression, 0, 23);\n}\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\nfunction isInvalidDayOfMonth(expression) {\n    return !isValidExpression(expression, 1, 31);\n}\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\nfunction isInvalidMonth(expression) {\n    return !isValidExpression(expression, 1, 12);\n}\n\n/**\n * @param {string} expression The Cron-Job expression.\n * @returns {boolean}\n */\nfunction isInvalidWeekDay(expression) {\n    return !isValidExpression(expression, 0, 7);\n}\n\n/**\n * @param {string[]} patterns The Cron-Job expression patterns.\n * @param {string[]} executablePatterns The executable Cron-Job expression\n * patterns.\n * @returns {void}\n */\nfunction validateFields(patterns, executablePatterns) {\n    if (isInvalidSecond(executablePatterns[0]))\n        throw new Error(`${patterns[0]} is a invalid expression for second`);\n\n    if (isInvalidMinute(executablePatterns[1]))\n        throw new Error(`${patterns[1]} is a invalid expression for minute`);\n\n    if (isInvalidHour(executablePatterns[2]))\n        throw new Error(`${patterns[2]} is a invalid expression for hour`);\n\n    if (isInvalidDayOfMonth(executablePatterns[3]))\n        throw new Error(\n            `${patterns[3]} is a invalid expression for day of month`\n        );\n\n    if (isInvalidMonth(executablePatterns[4]))\n        throw new Error(`${patterns[4]} is a invalid expression for month`);\n\n    if (isInvalidWeekDay(executablePatterns[5]))\n        throw new Error(`${patterns[5]} is a invalid expression for week day`);\n}\n\n/**\n * Validates a Cron-Job expression pattern.\n *\n * @param {string} pattern The Cron-Job expression pattern.\n * @returns {void}\n */\nfunction validate(pattern) {\n    if (typeof pattern !== 'string')\n        throw new TypeError('pattern must be a string!');\n\n    const patterns = pattern.split(' ');\n    const executablePatterns = convertExpression(pattern).split(' ');\n\n    if (patterns.length === 5) patterns.unshift('0');\n\n    validateFields(patterns, executablePatterns);\n}\n\nmodule.exports = validate;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}