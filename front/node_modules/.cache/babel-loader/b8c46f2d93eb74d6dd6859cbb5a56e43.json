{"ast":null,"code":"'use strict';\n\nmodule.exports = (() => {\n  function replaceWithRange(expression, text, init, end) {\n    const numbers = [];\n    let last = parseInt(end);\n    let first = parseInt(init);\n\n    if (first > last) {\n      last = parseInt(init);\n      first = parseInt(end);\n    }\n\n    for (let i = first; i <= last; i++) {\n      numbers.push(i);\n    }\n\n    return expression.replace(new RegExp(text, 'i'), numbers.join());\n  }\n\n  function convertRange(expression) {\n    const rangeRegEx = /(\\d+)-(\\d+)/;\n    let match = rangeRegEx.exec(expression);\n\n    while (match !== null && match.length > 0) {\n      expression = replaceWithRange(expression, match[0], match[1], match[2]);\n      match = rangeRegEx.exec(expression);\n    }\n\n    return expression;\n  }\n\n  function convertAllRanges(expressions) {\n    for (let i = 0; i < expressions.length; i++) {\n      expressions[i] = convertRange(expressions[i]);\n    }\n\n    return expressions;\n  }\n\n  return convertAllRanges;\n})();","map":{"version":3,"names":["module","exports","replaceWithRange","expression","text","init","end","numbers","last","parseInt","first","i","push","replace","RegExp","join","convertRange","rangeRegEx","match","exec","length","convertAllRanges","expressions"],"sources":["/Users/williambaquero/Documents/Go/Front/front/node_modules/node-cron/src/convert-expression/range-conversion.js"],"sourcesContent":["'use strict';\nmodule.exports = ( () => {\n    function replaceWithRange(expression, text, init, end) {\n\n        const numbers = [];\n        let last = parseInt(end);\n        let first = parseInt(init);\n\n        if(first > last){\n            last = parseInt(init);\n            first = parseInt(end);\n        }\n\n        for(let i = first; i <= last; i++) {\n            numbers.push(i);\n        }\n\n        return expression.replace(new RegExp(text, 'i'), numbers.join());\n    }\n\n    function convertRange(expression){\n        const rangeRegEx = /(\\d+)-(\\d+)/;\n        let match = rangeRegEx.exec(expression);\n        while(match !== null && match.length > 0){\n            expression = replaceWithRange(expression, match[0], match[1], match[2]);\n            match = rangeRegEx.exec(expression);\n        }\n        return expression;\n    }\n\n    function convertAllRanges(expressions){\n        for(let i = 0; i < expressions.length; i++){\n            expressions[i] = convertRange(expressions[i]);\n        }\n        return expressions;\n    }\n\n    return convertAllRanges;\n})();\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,OAAP,GAAiB,CAAE,MAAM;EACrB,SAASC,gBAAT,CAA0BC,UAA1B,EAAsCC,IAAtC,EAA4CC,IAA5C,EAAkDC,GAAlD,EAAuD;IAEnD,MAAMC,OAAO,GAAG,EAAhB;IACA,IAAIC,IAAI,GAAGC,QAAQ,CAACH,GAAD,CAAnB;IACA,IAAII,KAAK,GAAGD,QAAQ,CAACJ,IAAD,CAApB;;IAEA,IAAGK,KAAK,GAAGF,IAAX,EAAgB;MACZA,IAAI,GAAGC,QAAQ,CAACJ,IAAD,CAAf;MACAK,KAAK,GAAGD,QAAQ,CAACH,GAAD,CAAhB;IACH;;IAED,KAAI,IAAIK,CAAC,GAAGD,KAAZ,EAAmBC,CAAC,IAAIH,IAAxB,EAA8BG,CAAC,EAA/B,EAAmC;MAC/BJ,OAAO,CAACK,IAAR,CAAaD,CAAb;IACH;;IAED,OAAOR,UAAU,CAACU,OAAX,CAAmB,IAAIC,MAAJ,CAAWV,IAAX,EAAiB,GAAjB,CAAnB,EAA0CG,OAAO,CAACQ,IAAR,EAA1C,CAAP;EACH;;EAED,SAASC,YAAT,CAAsBb,UAAtB,EAAiC;IAC7B,MAAMc,UAAU,GAAG,aAAnB;IACA,IAAIC,KAAK,GAAGD,UAAU,CAACE,IAAX,CAAgBhB,UAAhB,CAAZ;;IACA,OAAMe,KAAK,KAAK,IAAV,IAAkBA,KAAK,CAACE,MAAN,GAAe,CAAvC,EAAyC;MACrCjB,UAAU,GAAGD,gBAAgB,CAACC,UAAD,EAAae,KAAK,CAAC,CAAD,CAAlB,EAAuBA,KAAK,CAAC,CAAD,CAA5B,EAAiCA,KAAK,CAAC,CAAD,CAAtC,CAA7B;MACAA,KAAK,GAAGD,UAAU,CAACE,IAAX,CAAgBhB,UAAhB,CAAR;IACH;;IACD,OAAOA,UAAP;EACH;;EAED,SAASkB,gBAAT,CAA0BC,WAA1B,EAAsC;IAClC,KAAI,IAAIX,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGW,WAAW,CAACF,MAA/B,EAAuCT,CAAC,EAAxC,EAA2C;MACvCW,WAAW,CAACX,CAAD,CAAX,GAAiBK,YAAY,CAACM,WAAW,CAACX,CAAD,CAAZ,CAA7B;IACH;;IACD,OAAOW,WAAP;EACH;;EAED,OAAOD,gBAAP;AACH,CArCgB,GAAjB"},"metadata":{},"sourceType":"script"}