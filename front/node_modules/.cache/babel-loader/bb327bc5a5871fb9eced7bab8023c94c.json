{"ast":null,"code":"'use strict';\n\nmodule.exports = (() => {\n  function convertSteps(expressions) {\n    var stepValuePattern = /^(.+)\\/(\\w+)$/;\n\n    for (var i = 0; i < expressions.length; i++) {\n      var match = stepValuePattern.exec(expressions[i]);\n      var isStepValue = match !== null && match.length > 0;\n\n      if (isStepValue) {\n        var baseDivider = match[2];\n\n        if (isNaN(baseDivider)) {\n          throw baseDivider + ' is not a valid step value';\n        }\n\n        var values = match[1].split(',');\n        var stepValues = [];\n        var divider = parseInt(baseDivider, 10);\n\n        for (var j = 0; j <= values.length; j++) {\n          var value = parseInt(values[j], 10);\n\n          if (value % divider === 0) {\n            stepValues.push(value);\n          }\n        }\n\n        expressions[i] = stepValues.join(',');\n      }\n    }\n\n    return expressions;\n  }\n\n  return convertSteps;\n})();","map":{"version":3,"names":["module","exports","convertSteps","expressions","stepValuePattern","i","length","match","exec","isStepValue","baseDivider","isNaN","values","split","stepValues","divider","parseInt","j","value","push","join"],"sources":["/Users/williambaquero/Documents/Go/Front/front/node_modules/node-cron/src/convert-expression/step-values-conversion.js"],"sourcesContent":["'use strict';\n\nmodule.exports = (() => {\n    function convertSteps(expressions){\n        var stepValuePattern = /^(.+)\\/(\\w+)$/;\n        for(var i = 0; i < expressions.length; i++){\n            var match = stepValuePattern.exec(expressions[i]);\n            var isStepValue = match !== null && match.length > 0;\n            if(isStepValue){\n                var baseDivider = match[2];\n                if(isNaN(baseDivider)){\n                    throw baseDivider + ' is not a valid step value';\n                }\n                var values = match[1].split(',');\n                var stepValues = [];\n                var divider = parseInt(baseDivider, 10);\n                for(var j = 0; j <= values.length; j++){\n                    var value = parseInt(values[j], 10);\n                    if(value % divider === 0){\n                        stepValues.push(value);\n                    }\n                }\n                expressions[i] = stepValues.join(',');\n            }\n        }\n        return expressions;\n    }\n\n    return convertSteps;\n})();\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,CAAC,MAAM;EACpB,SAASC,YAAT,CAAsBC,WAAtB,EAAkC;IAC9B,IAAIC,gBAAgB,GAAG,eAAvB;;IACA,KAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,WAAW,CAACG,MAA/B,EAAuCD,CAAC,EAAxC,EAA2C;MACvC,IAAIE,KAAK,GAAGH,gBAAgB,CAACI,IAAjB,CAAsBL,WAAW,CAACE,CAAD,CAAjC,CAAZ;MACA,IAAII,WAAW,GAAGF,KAAK,KAAK,IAAV,IAAkBA,KAAK,CAACD,MAAN,GAAe,CAAnD;;MACA,IAAGG,WAAH,EAAe;QACX,IAAIC,WAAW,GAAGH,KAAK,CAAC,CAAD,CAAvB;;QACA,IAAGI,KAAK,CAACD,WAAD,CAAR,EAAsB;UAClB,MAAMA,WAAW,GAAG,4BAApB;QACH;;QACD,IAAIE,MAAM,GAAGL,KAAK,CAAC,CAAD,CAAL,CAASM,KAAT,CAAe,GAAf,CAAb;QACA,IAAIC,UAAU,GAAG,EAAjB;QACA,IAAIC,OAAO,GAAGC,QAAQ,CAACN,WAAD,EAAc,EAAd,CAAtB;;QACA,KAAI,IAAIO,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAIL,MAAM,CAACN,MAA3B,EAAmCW,CAAC,EAApC,EAAuC;UACnC,IAAIC,KAAK,GAAGF,QAAQ,CAACJ,MAAM,CAACK,CAAD,CAAP,EAAY,EAAZ,CAApB;;UACA,IAAGC,KAAK,GAAGH,OAAR,KAAoB,CAAvB,EAAyB;YACrBD,UAAU,CAACK,IAAX,CAAgBD,KAAhB;UACH;QACJ;;QACDf,WAAW,CAACE,CAAD,CAAX,GAAiBS,UAAU,CAACM,IAAX,CAAgB,GAAhB,CAAjB;MACH;IACJ;;IACD,OAAOjB,WAAP;EACH;;EAED,OAAOD,YAAP;AACH,CA3BgB,GAAjB"},"metadata":{},"sourceType":"script"}