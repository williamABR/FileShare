{"ast":null,"code":"const EventEmitter = require('events');\n\nconst path = require('path');\n\nconst {\n  fork\n} = require('child_process');\n\nconst uuid = require('uuid');\n\nconst daemonPath = `${__dirname}/daemon.js`;\n\nclass BackgroundScheduledTask extends EventEmitter {\n  constructor(cronExpression, taskPath, options) {\n    super();\n\n    if (!options) {\n      options = {\n        scheduled: true,\n        recoverMissedExecutions: false\n      };\n    }\n\n    this.cronExpression = cronExpression;\n    this.taskPath = taskPath;\n    this.options = options;\n    this.options.name = this.options.name || uuid.v4();\n\n    if (options.scheduled) {\n      this.start();\n    }\n  }\n\n  start() {\n    this.stop();\n    this.forkProcess = fork(daemonPath);\n    this.forkProcess.on('message', message => {\n      switch (message.type) {\n        case 'task-done':\n          this.emit('task-done', message.result);\n          break;\n      }\n    });\n    let options = this.options;\n    options.scheduled = true;\n    this.forkProcess.send({\n      type: 'register',\n      path: path.resolve(this.taskPath),\n      cron: this.cronExpression,\n      options: options\n    });\n  }\n\n  stop() {\n    if (this.forkProcess) {\n      this.forkProcess.kill();\n    }\n  }\n\n  pid() {\n    if (this.forkProcess) {\n      return this.forkProcess.pid;\n    }\n  }\n\n  isRunning() {\n    return !this.forkProcess.killed;\n  }\n\n}\n\nmodule.exports = BackgroundScheduledTask;","map":{"version":3,"names":["EventEmitter","require","path","fork","uuid","daemonPath","__dirname","BackgroundScheduledTask","constructor","cronExpression","taskPath","options","scheduled","recoverMissedExecutions","name","v4","start","stop","forkProcess","on","message","type","emit","result","send","resolve","cron","kill","pid","isRunning","killed","module","exports"],"sources":["/Users/williambaquero/Documents/Go/Front/front/node_modules/node-cron/src/background-scheduled-task/index.js"],"sourcesContent":["const EventEmitter = require('events');\nconst path = require('path');\nconst { fork } = require('child_process');\nconst uuid = require('uuid');\n\nconst daemonPath = `${__dirname}/daemon.js`;\n\nclass BackgroundScheduledTask extends EventEmitter {\n    constructor(cronExpression, taskPath, options){\n        super();\n        if(!options){\n            options = {\n                scheduled: true,\n                recoverMissedExecutions: false,\n            };\n        }\n        this.cronExpression = cronExpression;\n        this.taskPath = taskPath;\n        this.options = options;\n        this.options.name = this.options.name || uuid.v4();\n\n        if(options.scheduled){\n            this.start();\n        }\n    }\n\n    start() {\n        this.stop();\n        this.forkProcess = fork(daemonPath);\n\n        this.forkProcess.on('message', (message) => {\n            switch(message.type){\n            case 'task-done':\n                this.emit('task-done', message.result);\n                break;\n            }\n        });\n\n        let options = this.options;\n        options.scheduled = true;\n        \n        this.forkProcess.send({\n            type: 'register',\n            path: path.resolve(this.taskPath),\n            cron: this.cronExpression,\n            options: options\n        });\n    }\n    \n    stop(){\n        if(this.forkProcess){\n            this.forkProcess.kill();\n        }\n    }\n\n    pid() {\n        if(this.forkProcess){\n            return this.forkProcess.pid;\n        }\n    }\n\n    isRunning(){\n        return !this.forkProcess.killed;\n    }\n}\n\nmodule.exports = BackgroundScheduledTask;"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAA5B;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;EAAEE;AAAF,IAAWF,OAAO,CAAC,eAAD,CAAxB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMI,UAAU,GAAI,GAAEC,SAAU,YAAhC;;AAEA,MAAMC,uBAAN,SAAsCP,YAAtC,CAAmD;EAC/CQ,WAAW,CAACC,cAAD,EAAiBC,QAAjB,EAA2BC,OAA3B,EAAmC;IAC1C;;IACA,IAAG,CAACA,OAAJ,EAAY;MACRA,OAAO,GAAG;QACNC,SAAS,EAAE,IADL;QAENC,uBAAuB,EAAE;MAFnB,CAAV;IAIH;;IACD,KAAKJ,cAAL,GAAsBA,cAAtB;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKA,OAAL,CAAaG,IAAb,GAAoB,KAAKH,OAAL,CAAaG,IAAb,IAAqBV,IAAI,CAACW,EAAL,EAAzC;;IAEA,IAAGJ,OAAO,CAACC,SAAX,EAAqB;MACjB,KAAKI,KAAL;IACH;EACJ;;EAEDA,KAAK,GAAG;IACJ,KAAKC,IAAL;IACA,KAAKC,WAAL,GAAmBf,IAAI,CAACE,UAAD,CAAvB;IAEA,KAAKa,WAAL,CAAiBC,EAAjB,CAAoB,SAApB,EAAgCC,OAAD,IAAa;MACxC,QAAOA,OAAO,CAACC,IAAf;QACA,KAAK,WAAL;UACI,KAAKC,IAAL,CAAU,WAAV,EAAuBF,OAAO,CAACG,MAA/B;UACA;MAHJ;IAKH,CAND;IAQA,IAAIZ,OAAO,GAAG,KAAKA,OAAnB;IACAA,OAAO,CAACC,SAAR,GAAoB,IAApB;IAEA,KAAKM,WAAL,CAAiBM,IAAjB,CAAsB;MAClBH,IAAI,EAAE,UADY;MAElBnB,IAAI,EAAEA,IAAI,CAACuB,OAAL,CAAa,KAAKf,QAAlB,CAFY;MAGlBgB,IAAI,EAAE,KAAKjB,cAHO;MAIlBE,OAAO,EAAEA;IAJS,CAAtB;EAMH;;EAEDM,IAAI,GAAE;IACF,IAAG,KAAKC,WAAR,EAAoB;MAChB,KAAKA,WAAL,CAAiBS,IAAjB;IACH;EACJ;;EAEDC,GAAG,GAAG;IACF,IAAG,KAAKV,WAAR,EAAoB;MAChB,OAAO,KAAKA,WAAL,CAAiBU,GAAxB;IACH;EACJ;;EAEDC,SAAS,GAAE;IACP,OAAO,CAAC,KAAKX,WAAL,CAAiBY,MAAzB;EACH;;AAxD8C;;AA2DnDC,MAAM,CAACC,OAAP,GAAiBzB,uBAAjB"},"metadata":{},"sourceType":"script"}