{"ast":null,"code":"const validatePattern = require('./pattern-validation');\n\nconst convertExpression = require('./convert-expression');\n\nfunction matchPattern(pattern, value) {\n  if (pattern.indexOf(',') !== -1) {\n    const patterns = pattern.split(',');\n    return patterns.indexOf(value.toString()) !== -1;\n  }\n\n  return pattern === value.toString();\n}\n\nclass TimeMatcher {\n  constructor(pattern, timezone) {\n    validatePattern(pattern);\n    this.pattern = convertExpression(pattern);\n    this.timezone = timezone;\n    this.expressions = this.pattern.split(' ');\n  }\n\n  match(date) {\n    date = this.apply(date);\n    const runOnSecond = matchPattern(this.expressions[0], date.getSeconds());\n    const runOnMinute = matchPattern(this.expressions[1], date.getMinutes());\n    const runOnHour = matchPattern(this.expressions[2], date.getHours());\n    const runOnDay = matchPattern(this.expressions[3], date.getDate());\n    const runOnMonth = matchPattern(this.expressions[4], date.getMonth() + 1);\n    const runOnWeekDay = matchPattern(this.expressions[5], date.getDay());\n    return runOnSecond && runOnMinute && runOnHour && runOnDay && runOnMonth && runOnWeekDay;\n  }\n\n  apply(date) {\n    if (this.timezone) {\n      const dtf = new Intl.DateTimeFormat('en-US', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hourCycle: 'h23',\n        fractionalSecondDigits: 3,\n        timeZone: this.timezone\n      });\n      return new Date(dtf.format(date));\n    }\n\n    return date;\n  }\n\n}\n\nmodule.exports = TimeMatcher;","map":{"version":3,"names":["validatePattern","require","convertExpression","matchPattern","pattern","value","indexOf","patterns","split","toString","TimeMatcher","constructor","timezone","expressions","match","date","apply","runOnSecond","getSeconds","runOnMinute","getMinutes","runOnHour","getHours","runOnDay","getDate","runOnMonth","getMonth","runOnWeekDay","getDay","dtf","Intl","DateTimeFormat","year","month","day","hour","minute","second","hourCycle","fractionalSecondDigits","timeZone","Date","format","module","exports"],"sources":["/Users/williambaquero/Documents/Go/Front/front/node_modules/node-cron/src/time-matcher.js"],"sourcesContent":["const validatePattern = require('./pattern-validation');\nconst convertExpression = require('./convert-expression');\n\nfunction matchPattern(pattern, value){\n    if( pattern.indexOf(',') !== -1 ){\n        const patterns = pattern.split(',');\n        return patterns.indexOf(value.toString()) !== -1;\n    }\n    return pattern === value.toString();\n}\n\nclass TimeMatcher{\n    constructor(pattern, timezone){\n        validatePattern(pattern);\n        this.pattern = convertExpression(pattern);\n        this.timezone = timezone;\n        this.expressions = this.pattern.split(' ');\n    }\n\n    match(date){\n        date = this.apply(date);\n\n        const runOnSecond = matchPattern(this.expressions[0], date.getSeconds());\n        const runOnMinute = matchPattern(this.expressions[1], date.getMinutes());\n        const runOnHour = matchPattern(this.expressions[2], date.getHours());\n        const runOnDay = matchPattern(this.expressions[3], date.getDate());\n        const runOnMonth = matchPattern(this.expressions[4], date.getMonth() + 1);\n        const runOnWeekDay = matchPattern(this.expressions[5], date.getDay());\n\n        return runOnSecond && runOnMinute && runOnHour && runOnDay && runOnMonth && runOnWeekDay;\n    }\n\n    apply(date){\n        if(this.timezone){\n            const dtf = new Intl.DateTimeFormat('en-US', {\n                year: 'numeric',\n                month: '2-digit',\n                day: '2-digit',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n                hourCycle: 'h23',\n                fractionalSecondDigits: 3,\n                timeZone: this.timezone\n            });\n            \n            return new Date(dtf.format(date));\n        }\n        \n        return date;\n    }\n}\n\nmodule.exports = TimeMatcher;"],"mappings":"AAAA,MAAMA,eAAe,GAAGC,OAAO,CAAC,sBAAD,CAA/B;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,sBAAD,CAAjC;;AAEA,SAASE,YAAT,CAAsBC,OAAtB,EAA+BC,KAA/B,EAAqC;EACjC,IAAID,OAAO,CAACE,OAAR,CAAgB,GAAhB,MAAyB,CAAC,CAA9B,EAAiC;IAC7B,MAAMC,QAAQ,GAAGH,OAAO,CAACI,KAAR,CAAc,GAAd,CAAjB;IACA,OAAOD,QAAQ,CAACD,OAAT,CAAiBD,KAAK,CAACI,QAAN,EAAjB,MAAuC,CAAC,CAA/C;EACH;;EACD,OAAOL,OAAO,KAAKC,KAAK,CAACI,QAAN,EAAnB;AACH;;AAED,MAAMC,WAAN,CAAiB;EACbC,WAAW,CAACP,OAAD,EAAUQ,QAAV,EAAmB;IAC1BZ,eAAe,CAACI,OAAD,CAAf;IACA,KAAKA,OAAL,GAAeF,iBAAiB,CAACE,OAAD,CAAhC;IACA,KAAKQ,QAAL,GAAgBA,QAAhB;IACA,KAAKC,WAAL,GAAmB,KAAKT,OAAL,CAAaI,KAAb,CAAmB,GAAnB,CAAnB;EACH;;EAEDM,KAAK,CAACC,IAAD,EAAM;IACPA,IAAI,GAAG,KAAKC,KAAL,CAAWD,IAAX,CAAP;IAEA,MAAME,WAAW,GAAGd,YAAY,CAAC,KAAKU,WAAL,CAAiB,CAAjB,CAAD,EAAsBE,IAAI,CAACG,UAAL,EAAtB,CAAhC;IACA,MAAMC,WAAW,GAAGhB,YAAY,CAAC,KAAKU,WAAL,CAAiB,CAAjB,CAAD,EAAsBE,IAAI,CAACK,UAAL,EAAtB,CAAhC;IACA,MAAMC,SAAS,GAAGlB,YAAY,CAAC,KAAKU,WAAL,CAAiB,CAAjB,CAAD,EAAsBE,IAAI,CAACO,QAAL,EAAtB,CAA9B;IACA,MAAMC,QAAQ,GAAGpB,YAAY,CAAC,KAAKU,WAAL,CAAiB,CAAjB,CAAD,EAAsBE,IAAI,CAACS,OAAL,EAAtB,CAA7B;IACA,MAAMC,UAAU,GAAGtB,YAAY,CAAC,KAAKU,WAAL,CAAiB,CAAjB,CAAD,EAAsBE,IAAI,CAACW,QAAL,KAAkB,CAAxC,CAA/B;IACA,MAAMC,YAAY,GAAGxB,YAAY,CAAC,KAAKU,WAAL,CAAiB,CAAjB,CAAD,EAAsBE,IAAI,CAACa,MAAL,EAAtB,CAAjC;IAEA,OAAOX,WAAW,IAAIE,WAAf,IAA8BE,SAA9B,IAA2CE,QAA3C,IAAuDE,UAAvD,IAAqEE,YAA5E;EACH;;EAEDX,KAAK,CAACD,IAAD,EAAM;IACP,IAAG,KAAKH,QAAR,EAAiB;MACb,MAAMiB,GAAG,GAAG,IAAIC,IAAI,CAACC,cAAT,CAAwB,OAAxB,EAAiC;QACzCC,IAAI,EAAE,SADmC;QAEzCC,KAAK,EAAE,SAFkC;QAGzCC,GAAG,EAAE,SAHoC;QAIzCC,IAAI,EAAE,SAJmC;QAKzCC,MAAM,EAAE,SALiC;QAMzCC,MAAM,EAAE,SANiC;QAOzCC,SAAS,EAAE,KAP8B;QAQzCC,sBAAsB,EAAE,CARiB;QASzCC,QAAQ,EAAE,KAAK5B;MAT0B,CAAjC,CAAZ;MAYA,OAAO,IAAI6B,IAAJ,CAASZ,GAAG,CAACa,MAAJ,CAAW3B,IAAX,CAAT,CAAP;IACH;;IAED,OAAOA,IAAP;EACH;;AAvCY;;AA0CjB4B,MAAM,CAACC,OAAP,GAAiBlC,WAAjB"},"metadata":{},"sourceType":"script"}